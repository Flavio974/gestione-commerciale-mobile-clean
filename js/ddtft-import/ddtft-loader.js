/**
 * DDTFT Modular Loader
 * Carica il sistema modulare DDTFT mantenendo la compatibilit√†
 */

// Funzione per caricare il sistema modulare
async function loadDDTFTModules() {
  console.log('üîÑ Caricamento sistema modulare DDTFT...');
  
  try {
    // Carica il modulo core che include tutti gli altri
    const { DDTFTImport, DDTExtractor, FatturaExtractor } = await import('./ddtft-import-core.js');
    
    // Esporta globalmente per compatibilit√†
    window.DDTFTImport = DDTFTImport;
    window.DDTExtractor = DDTExtractor;
    window.FatturaExtractor = FatturaExtractor;
    
    console.log('‚úÖ Sistema modulare DDTFT caricato con successo');
    console.log('üì¶ Moduli disponibili:', Object.keys(DDTFTImport));
    
    return true;
  } catch (error) {
    console.error('‚ùå Errore caricamento moduli DDTFT:', error);
    
    // Fallback al file originale
    console.log('üîÑ Fallback al sistema originale...');
    try {
      // Il file originale dovrebbe ancora essere disponibile
      if (window.DDTFTImport) {
        console.log('‚úÖ Sistema originale gi√† disponibile');
        return true;
      } else {
        console.error('‚ùå Nessun sistema DDTFT disponibile');
        return false;
      }
    } catch (fallbackError) {
      console.error('‚ùå Errore anche nel fallback:', fallbackError);
      return false;
    }
  }
}

// Auto-caricamento quando il DOM √® pronto
if (document.readyState === 'loading') {
  document.addEventListener('DOMContentLoaded', loadDDTFTModules);
} else {
  loadDDTFTModules();
}

// Esporta la funzione di caricamento
window.loadDDTFTModules = loadDDTFTModules;